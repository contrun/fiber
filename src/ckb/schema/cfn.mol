import blockchain;

array Signature [byte; 64];
array PubNonce [byte; 66]; // PubNonce used by musig2 crate.
array Pubkey [byte; 33];

table OpenChannel {
    chain_hash:                  Byte32,
    channel_id:                  Byte32,
    funding_udt_type_script:     ScriptOpt,
    funding_amount:              Uint128,
    reserved_ckb_amount:          Uint64,
    funding_fee_rate:            Uint64,
    commitment_fee_rate:         Uint64,
    max_tlc_value_in_flight:     Uint128,
    max_accept_tlcs:             Uint64,
    min_tlc_value:               Uint128,
    to_self_delay:               Uint64,
    funding_pubkey:              Pubkey,
    revocation_basepoint:        Pubkey,
    payment_basepoint:           Pubkey,
    delayed_payment_basepoint:   Pubkey,
    tlc_basepoint:               Pubkey,
    first_per_commitment_point:  Pubkey,
    second_per_commitment_point: Pubkey,
    next_local_nonce:            PubNonce,
    channel_flags:               byte,
}

table AcceptChannel {
    channel_id:                  Byte32,
    funding_amount:              Uint128,
    reserved_ckb_amount:          Uint64,
    max_tlc_value_in_flight:     Uint128,
    max_accept_tlcs:             Uint64,
    min_tlc_value:               Uint128,
    to_self_delay:               Uint64,
    funding_pubkey:              Pubkey,
    revocation_basepoint:        Pubkey,
    payment_basepoint:           Pubkey,
    delayed_payment_basepoint:   Pubkey,
    tlc_basepoint:               Pubkey,
    first_per_commitment_point:  Pubkey,
    second_per_commitment_point: Pubkey,
    next_local_nonce:            PubNonce,
}

table CommitmentSigned {
    channel_id:     Byte32,
	partial_signature: Byte32,
    next_local_nonce:  PubNonce,
}

table TxSignatures {
    channel_id: Byte32,
    tx_hash:    Byte32,
    witnesses:  BytesVec,
}

table ChannelReady {
    channel_id: Byte32,
}

table TxUpdate {
    channel_id: Byte32,
    tx:         Transaction,
}

table TxComplete {
    channel_id: Byte32,
}

table TxAbort {
    channel_id: Byte32,
    message:    Bytes,
}

table TxInitRBF {
    channel_id: Byte32,
    fee_rate:   Uint64,
}

table TxAckRBF {
    channel_id: Byte32,
}

table Shutdown {
    channel_id: Byte32,
    fee_rate:        Uint64,
    close_script: Script,
}

table ClosingSigned {
    channel_id: Byte32,
    partial_signature:  Byte32,
}

table AddTlc {
    channel_id:     Byte32,
    tlc_id:         Uint64,
    amount:         Uint128,
    payment_hash:   Byte32,
    expiry:         Uint64,
    hash_algorithm: byte,
    // This is the packet each hops need to decrypt and determine
    // which nodes to forward (or accept the tlc if it is the final node).
    onion_packet:   Bytes,
}

table RevokeAndAck {
    channel_id:                 Byte32,
    per_commitment_secret:      Byte32,
    next_per_commitment_point:  Pubkey,
}

struct RemoveTlcFulfill {
    payment_preimage:   Byte32,
}

struct RemoveTlcFail {
    error_code:         Uint32,
}

union RemoveTlcReason {
    RemoveTlcFulfill,
    RemoveTlcFail,
}

table RemoveTlc {
    channel_id:         Byte32,
    tlc_id:             Uint64,
    reason:             RemoveTlcReason,
}

table ReestablishChannel {
    channel_id: Byte32,
    local_commitment_number: Uint64,
    remote_commitment_number: Uint64,
}

table AnnouncementSignatures {
    channel_id: Byte32,
    short_channel_id: Uint64,
    partial_signature: Byte32,
}

table NodeAnnouncement {
    // Signature to this message.
    signature: Signature,
    // Tentatively using 64 bits for features. May change the type later while developing.
    // https://github.com/lightningdevkit/rust-lightning/blob/8c1b3d1263f6b9247c0c819039ef2027dc4d4588/lightning/src/ln/features.rs#L448-L457
    // rust-lightning uses a Vec<u8> here.
    features: Uint64,
    // Timestamp to the node announcement update, later update should have larger timestamp.
    timestamp: Uint64,
    node_id: Pubkey,
    // Must be a valid utf-8 string of length maximal length 32 bytes.
    alias: Byte32,
    // All the reachable addresses. 
    address: BytesVec,
}

table ChannelAnnouncement {
    node_signature_1: Signature,
    node_signature_2: Signature,
    // Signature signed by the funding transaction output public key.
    ckb_signature: Signature,
    // Tentatively using 64 bits for features. May change the type later while developing.
    // https://github.com/lightningdevkit/rust-lightning/blob/8c1b3d1263f6b9247c0c819039ef2027dc4d4588/lightning/src/ln/msgs.rs#L1200-L1200
    // rust-lightning uses a Vec<u8> here.
    features: Uint64,
    chain_hash: Byte32,
    short_channel_id: Uint64,
    node_1_id: Pubkey,
    node_2_id: Pubkey,
    // The aggregated public key of the fundign transaction output.
    ckb_key: Pubkey,
}

table ChannelUpdate {
    // Signature of the node that wants to update the channel information.
    signature: Signature,
    chain_hash: Byte32,
    short_channel_id: Uint64,
    timestamp: Uint64,
    message_flags: Uint32,
    channel_flags: Uint32,
    cltv_expiry_delta: Uint64,
    htlc_minimum_value: Uint128,
    fee_value: Uint128,    
}

union CFNMessage {
    OpenChannel,
    AcceptChannel,
    TxSignatures,
    TxUpdate,
    TxComplete,
    TxAbort,
    TxInitRBF,
    TxAckRBF,
    CommitmentSigned,
    ChannelReady,
    AddTlc,
    RemoveTlc,
    RevokeAndAck,
    Shutdown,
    ClosingSigned,
    ReestablishChannel,
    AnnouncementSignatures,
    NodeAnnouncement,
    ChannelAnnouncement,
    ChannelUpdate,
}


